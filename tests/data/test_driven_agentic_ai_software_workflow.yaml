--- AI AGENTIC DEVELOPER WORKFLOW YAML (MASSIVE) ---
description: ''
name: ai_agent_platform_builder_v1
start_task: analyze_requirements
tasks:
  aggregate_test_results:
    args:
    - '{{unit_results}}'
    - '{{int_results}}'
    - '{{e2e_results}}'
    dependencies:
    - run_full_test_suite
    function: ci.aggregate_results
    kwargs: {}
    metadata: {}
    operator_type: task
    result_key: test_run_results
    task_id: aggregate_test_results
  analyze_requirements:
    args:
    - '{{project_spec_url}}'
    dependencies: []
    function: llm.analyzer.ingest_specification
    kwargs: {}
    metadata: {}
    operator_type: task
    result_key: project_plan
    task_id: analyze_requirements
  ansible_deploy_api:
    args:
    - playbooks/api.yml
    dependencies:
    - run_ansible_deployments
    function: deploy.ansible.run_playbook
    kwargs: {}
    metadata: {}
    operator_type: task
    task_id: ansible_deploy_api
  ansible_deploy_db:
    args:
    - playbooks/database.yml
    dependencies:
    - run_ansible_deployments
    function: deploy.ansible.run_playbook
    kwargs: {}
    metadata: {}
    operator_type: task
    task_id: ansible_deploy_db
  ansible_deploy_frontend:
    args:
    - playbooks/frontend.yml
    dependencies:
    - run_ansible_deployments
    function: deploy.ansible.run_playbook
    kwargs: {}
    metadata: {}
    operator_type: task
    task_id: ansible_deploy_frontend
  ansible_deploy_workers:
    args:
    - playbooks/workers.yml
    dependencies:
    - run_ansible_deployments
    function: deploy.ansible.run_playbook
    kwargs: {}
    metadata: {}
    operator_type: task
    task_id: ansible_deploy_workers
  apply_and_commit_code:
    args:
    - '{{workspace}}'
    - '{{code_diff}}'
    - 'feat: {{coding_plan.target}}'
    dependencies:
    - check_plan_action
    function: vcs.git.apply_and_commit
    kwargs: {}
    metadata: {}
    operator_type: task
    task_id: apply_and_commit_code
  check_plan_action:
    condition: '{{coding_plan.action}} == ''implement'''
    dependencies:
    - plan_next_coding_step
    if_false: refactor_code
    if_true: implement_code
    metadata: {}
    operator_type: condition
    task_id: check_plan_action
  commit_tests_to_git:
    args:
    - '{{workspace}}'
    - 'ci(tests): add initial test suite for {{item.service_name}}'
    dependencies:
    - generate_test_stubs
    function: vcs.git.commit_files
    kwargs: {}
    metadata: {}
    operator_type: task
    task_id: commit_tests_to_git
  configure_loki:
    args:
    - '{{infra_outputs.log_streams}}'
    dependencies:
    - setup_observability
    function: observe.loki.apply_config
    kwargs: {}
    metadata: {}
    operator_type: task
    task_id: configure_loki
  configure_prometheus:
    args:
    - '{{infra_outputs.service_endpoints}}'
    dependencies:
    - setup_observability
    function: observe.prometheus.apply_config
    kwargs: {}
    metadata: {}
    operator_type: task
    task_id: configure_prometheus
  configure_tempo:
    args: []
    dependencies:
    - setup_observability
    function: observe.tempo.apply_config
    kwargs: {}
    metadata: {}
    operator_type: task
    task_id: configure_tempo
  generate_test_stubs:
    args:
    - '{{workspace}}'
    - '{{item.service_name}}'
    - '{{item.api_spec}}'
    dependencies:
    - test_generation_loop
    function: llm.test_generator.create_e2e_tests
    kwargs: {}
    metadata: {}
    operator_type: task
    task_id: generate_test_stubs
  implement_code:
    args:
    - '{{workspace}}'
    - '{{coding_plan.target}}'
    - '{{coding_plan.prompt}}'
    dependencies:
    - check_plan_action
    function: llm.coder.write_implementation
    kwargs: {}
    metadata: {}
    operator_type: task
    result_key: code_diff
    task_id: implement_code
  main_build_loop:
    condition: '{{test_run_results.all_passed}} == false'
    dependencies:
    - run_initial_test_suite
    loop_body:
    - args:
      - '{{project_plan}}'
      - '{{test_run_results.failing_tests}}'
      dependencies:
      - main_build_loop
      function: llm.planner.analyze_failing_tests
      kwargs: {}
      metadata: {}
      operator_type: task
      result_key: coding_plan
      task_id: plan_next_coding_step
    - condition: '{{coding_plan.action}} == ''implement'''
      dependencies:
      - plan_next_coding_step
      if_false: refactor_code
      if_true: implement_code
      metadata: {}
      operator_type: condition
      task_id: check_plan_action
    - args:
      - '{{workspace}}'
      - '{{coding_plan.target}}'
      - '{{coding_plan.prompt}}'
      dependencies:
      - check_plan_action
      function: llm.coder.write_implementation
      kwargs: {}
      metadata: {}
      operator_type: task
      result_key: code_diff
      task_id: implement_code
    - args:
      - '{{workspace}}'
      - '{{coding_plan.target}}'
      - '{{coding_plan.reason}}'
      dependencies:
      - check_plan_action
      function: llm.refactor.rewrite_code
      kwargs: {}
      metadata: {}
      operator_type: task
      result_key: code_diff
      task_id: refactor_code
    - args:
      - '{{workspace}}'
      - '{{code_diff}}'
      - 'feat: {{coding_plan.target}}'
      dependencies:
      - check_plan_action
      function: vcs.git.apply_and_commit
      kwargs: {}
      metadata: {}
      operator_type: task
      task_id: apply_and_commit_code
    - branches:
        e2e:
        - run_e2e_tests
        integration:
        - run_integration_tests
        unit:
        - run_unit_tests
      dependencies:
      - apply_and_commit_code
      metadata: {}
      operator_type: parallel
      task_id: run_full_test_suite
    - args:
      - '{{workspace}}'
      dependencies:
      - run_full_test_suite
      function: ci.run_unit_tests
      kwargs: {}
      metadata: {}
      operator_type: task
      result_key: unit_results
      task_id: run_unit_tests
    - args:
      - '{{workspace}}'
      dependencies:
      - run_full_test_suite
      function: ci.run_integration_tests
      kwargs: {}
      metadata: {}
      operator_type: task
      result_key: int_results
      task_id: run_integration_tests
    - args:
      - '{{workspace}}'
      dependencies:
      - run_full_test_suite
      function: ci.run_e2e_tests
      kwargs: {}
      metadata: {}
      operator_type: task
      result_key: e2e_results
      task_id: run_e2e_tests
    - args:
      - '{{unit_results}}'
      - '{{int_results}}'
      - '{{e2e_results}}'
      dependencies:
      - run_full_test_suite
      function: ci.aggregate_results
      kwargs: {}
      metadata: {}
      operator_type: task
      result_key: test_run_results
      task_id: aggregate_test_results
    metadata: {}
    operator_type: while
    task_id: main_build_loop
  notify_user_on_slack:
    args:
    - Platform build and deployment complete. Metrics are active.
    dependencies:
    - verify_observability_data
    function: notify.slack.send_message
    kwargs: {}
    metadata: {}
    operator_type: task
    task_id: notify_user_on_slack
  plan_next_coding_step:
    args:
    - '{{project_plan}}'
    - '{{test_run_results.failing_tests}}'
    dependencies:
    - main_build_loop
    function: llm.planner.analyze_failing_tests
    kwargs: {}
    metadata: {}
    operator_type: task
    result_key: coding_plan
    task_id: plan_next_coding_step
  provision_infrastructure:
    args:
    - ./terraform
    dependencies:
    - main_build_loop
    function: iac.terraform.apply
    kwargs: {}
    metadata: {}
    operator_type: task
    result_key: infra_outputs
    task_id: provision_infrastructure
  refactor_code:
    args:
    - '{{workspace}}'
    - '{{coding_plan.target}}'
    - '{{coding_plan.reason}}'
    dependencies:
    - check_plan_action
    function: llm.refactor.rewrite_code
    kwargs: {}
    metadata: {}
    operator_type: task
    result_key: code_diff
    task_id: refactor_code
  run_ansible_deployments:
    branches:
      api:
      - ansible_deploy_api
      database:
      - ansible_deploy_db
      frontend:
      - ansible_deploy_frontend
      workers:
      - ansible_deploy_workers
    dependencies:
    - provision_infrastructure
    metadata: {}
    operator_type: parallel
    task_id: run_ansible_deployments
  run_e2e_tests:
    args:
    - '{{workspace}}'
    dependencies:
    - run_full_test_suite
    function: ci.run_e2e_tests
    kwargs: {}
    metadata: {}
    operator_type: task
    result_key: e2e_results
    task_id: run_e2e_tests
  run_full_test_suite:
    branches:
      e2e:
      - run_e2e_tests
      integration:
      - run_integration_tests
      unit:
      - run_unit_tests
    dependencies:
    - apply_and_commit_code
    metadata: {}
    operator_type: parallel
    task_id: run_full_test_suite
  run_initial_test_suite:
    args:
    - '{{workspace}}'
    dependencies:
    - test_generation_loop
    function: ci.run_all_tests
    kwargs: {}
    metadata: {}
    operator_type: task
    result_key: test_run_results
    task_id: run_initial_test_suite
  run_integration_tests:
    args:
    - '{{workspace}}'
    dependencies:
    - run_full_test_suite
    function: ci.run_integration_tests
    kwargs: {}
    metadata: {}
    operator_type: task
    result_key: int_results
    task_id: run_integration_tests
  run_production_smoke_tests:
    args:
    - '{{infra_outputs.app_url}}'
    dependencies:
    - setup_observability
    function: ci.run_smoke_tests
    kwargs: {}
    metadata: {}
    operator_type: task
    result_key: smoke_test_results
    task_id: run_production_smoke_tests
  run_unit_tests:
    args:
    - '{{workspace}}'
    dependencies:
    - run_full_test_suite
    function: ci.run_unit_tests
    kwargs: {}
    metadata: {}
    operator_type: task
    result_key: unit_results
    task_id: run_unit_tests
  setup_git_repository:
    args:
    - '{{project_plan.repo_url}}'
    dependencies:
    - analyze_requirements
    function: vcs.git.clone_and_setup_repo
    kwargs: {}
    metadata: {}
    operator_type: task
    result_key: workspace
    task_id: setup_git_repository
  setup_observability:
    branches:
      logging:
      - configure_loki
      metrics:
      - configure_prometheus
      tracing:
      - configure_tempo
    dependencies:
    - wait_for_services_health
    metadata: {}
    operator_type: parallel
    task_id: setup_observability
  test_generation_loop:
    dependencies:
    - setup_git_repository
    items: '{{project_plan.microservices}}'
    loop_body:
    - args:
      - '{{workspace}}'
      - '{{item.service_name}}'
      - '{{item.api_spec}}'
      dependencies:
      - test_generation_loop
      function: llm.test_generator.create_e2e_tests
      kwargs: {}
      metadata: {}
      operator_type: task
      task_id: generate_test_stubs
    - args:
      - '{{workspace}}'
      - 'ci(tests): add initial test suite for {{item.service_name}}'
      dependencies:
      - generate_test_stubs
      function: vcs.git.commit_files
      kwargs: {}
      metadata: {}
      operator_type: task
      task_id: commit_tests_to_git
    metadata: {}
    operator_type: foreach
    task_id: test_generation_loop
  verify_observability_data:
    args:
    - '{{project_plan.key_metrics}}'
    dependencies:
    - run_production_smoke_tests
    function: observe.prometheus.query_metrics
    kwargs: {}
    metadata: {}
    operator_type: task
    result_key: metrics_check
    task_id: verify_observability_data
  wait_for_services_health:
    dependencies:
    - run_ansible_deployments
    metadata: {}
    operator_type: wait
    task_id: wait_for_services_health
    wait_for: PT5M
variables:
  ci_runner_pool: default-pool
  project_spec_url: http://s3.com/specs/my_project.md
version: 1.0.0

---------------------------------------------------

✅ Successfully generated massive AI agent workflow YAML.
Total tasks defined: 31
